作为工程师，我们使用可重复性的进程、以往的知识和专业的判断力，去设计、搭建、运维生产环境中的数据架构与数据存储！
As engineers, we apply repeatable processes, established knownledge and expert judgment to design, build, 
and operate production data stores and data structures within.

而作为数据库可靠性工程师，我们还必须具备更深级别的数据库专业知识和运维原则
As database reliability engineers, we must take the operational principles and the depth of database expertise 
that we possess one step further.

1.传统的数据保护
  A.开发与运维职能完全独立
  B.software：商用软件  ->  开源软件  -> 安全防护，日志保护/审计，冗余部署，备份与灾难恢复
  C.hardware：专用服务器/OS/Network/防火墙  -> 共用服务器/Linux/Network ->  自我冗余：硬件/开源软件/团队
  
2.虚拟化/临时性的数据云存储
  A.基于自动化、与应用一体化的配置/部署
  B.遵守安全审计与DBRE制定的安全标准
  C.常态化/自动化的备份与恢复测试
  
3.实现业务的自我扩展
  资源分配不均，就会出现木桶效应。DBRE如何解放自我，不再成为木桶中的最短木板？
  A.制定架构/配置/安全审计标准
  B.标准化备份与恢复方法，用于数据安全与数据重用
  C.明确监控指标信息，用于修改数据测试与安全部署 
 =>
  a.消除重复的/无创造性的/无意义的工作
  b.应该将DB与架构中的其他分子一样对待，DB不再特殊化
  c.消除DBRE与SRE/SWE之间的界限，让代码掌管一切: DBRE/SRE学习代码，SWE学习Operations
  
4.从DB的需求等级分析
  a.生存与安全：backup/restore/failover/数据冗余/数据一致性检测
  b.归属感：devops group,组建弹性/制度化的数据存储系统，鼓励任何人操作数据
  c.尊重：DB依托的系统层面的可观察、可调试、可视化 -> 研究总体的趋势性，时间点的尖峰波动
  d.自我实现：帮助devops追踪数据处理中遇到的短板，完成数据处理任务，以及良好的自我修复能力
