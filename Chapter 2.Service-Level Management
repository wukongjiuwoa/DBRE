SLA: Service-Level Agreement，指标太多而且多数不具有指导意义，且相互之间有交叉影响
SLO: Service-Level Objectives，服务承诺书，用以引导架构的设计理念

SLM: Service-Level Management
一、SLM是非常困难的，举几个例子：
  1.如果使用端到端的实时监控，那么就要耗费大量的资源，不是每个服务都支撑的起，不同的服务需要的SLO也不同；
  2.如果以API请求成功/失败为准线，那么这个“成功”是真的达到用户的需求了吗？“失败”又是因为网络、数据库、还是客户端的问题？  
  3.或许，你可以得出一个结论说我的服务可以达到5个9的健壮性，但是在不正常的状态中可能50%的延迟超过了5s，可能健壮只是对于你自己的区域，是否应该区别对待？
  4.关于bug升级、特殊表数据丢失问题，如果用户并没有注意到数据问题，是否通告？
  5.你的服务可能是高健壮性的，但是如果每次错误都会引起服务失败，或者服务中基本不用的分子引起整个服务的不可用，如何处理？
  6.那么，脱离服务自身指标，使用实际的错误持续时间或者超过阈值的时长做准线，是否更好些？

这其实，已经由计算问题,上升为社会学问题。即：
  1.服务端，应注重那些指标是性能变好/变坏的关键，是侧重开发还是稳定
  2.客户端，尽可能收集每个用户的实践信息，用于可用性评估
  
二、Service-Level Indicators
评估SLOs之前，首先考虑几个实际的性能指标SLI，SLO与SLI可能是一对一，也可能一对多。
  1.Latency：(C)用户指标，KO 相应时间(S)
  2.Availability：基于Latency之上
  3.吞吐量：只有在此基础之上的Latency测量才有意义
  4.持久化：数据丢失的容忍度
  5.成本与效率：应该有每次操作的成本视图
  
三、以用户为中心，定义SLO最重要的三个SLI
  1.Latency：Amazon/Google/Facebook
    速度的重要性,100ms是一道坎；同时极致的下限也没有多大意义
    禁用平均值，更准确的数据应该是min/max/99值
    所以SLO定义延迟：每分钟内保证99%的请求在25~100ms之内得到响应
    
  2.Availability：
    注意：一次10分钟的宕机与10次一分钟的宕机，虽然计算指标一样，但是对于用户的意义并不一样！
    两个重要的数据点：
      MTBF(Mean Time Between Failures): 平均故障间隔时间，越长越好
      MTTR(Mean Time To Recover): 平均恢复时间，越短越好
      
    
