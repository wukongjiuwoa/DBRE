SLA: Service-Level Agreement，指标太多而且多数不具有指导意义，且相互之间有交叉影响
SLO: Service-Level Objectives，服务承诺书，用以引导架构的设计理念

SLM: Service-Level Management
一、SLM是非常困难的，举几个例子：
  1.如果使用端到端的实时监控，那么就要耗费大量的资源，不是每个服务都支撑的起，不同的服务需要的SLO也不同；
  2.如果以API请求成功/失败为准线，那么这个“成功”是真的达到用户的需求了吗？“失败”又是因为网络、数据库、还是客户端的问题？  
  3.或许，你可以得出一个结论说我的服务可以达到5个9的健壮性，但是在不正常的状态中可能50%的延迟超过了5s，可能健壮只是对于你自己的区域，是否应该区别对待？
  4.关于bug升级、特殊表数据丢失问题，如果用户并没有注意到数据问题，是否通告？
  5.你的服务可能是高健壮性的，但是如果每次错误都会引起服务失败，或者服务中基本不用的分子引起整个服务的不可用，如何处理？
  6.那么，脱离服务自身指标，使用实际的错误持续时间或者超过阈值的时长做准线，是否更好些？

这其实，已经由计算问题,上升为社会学问题。即：
  1.服务端，应注重那些指标是性能变好/变坏的关键，是侧重开发还是稳定
  2.客户端，尽可能收集每个用户的实践信息，用于可用性评估
  
二、Service-Level Indicators
评估SLOs之前，首先考虑几个实际的性能指标SLI，SLO与SLI可能是一对一，也可能一对多。
  1.Latency：(C)用户指标，KO 相应时间(S)
  2.Availability：基于Latency之上
  3.吞吐量：只有在此基础之上的Latency测量才有意义
  4.持久化：数据丢失的容忍度
  5.成本与效率：应该有每次操作的成本视图
  
三、以用户为中心，定义SLO最重要的三个SLI
  1.Latency：Amazon/Google/Facebook
    速度的重要性,100ms是一道坎；同时极致的下限也没有多大意义
    禁用平均值，更准确的数据应该是min/max/99值
    所以SLO定义延迟：每分钟内保证99%的请求在25~100ms之内得到响应
    
  2.Availability：
    注意：一次10分钟的宕机与10次一分钟的宕机，虽然计算指标一样，但是对于用户的意义并不一样！
    
    两个重要的数据点：
      MTBF(Mean Time Between Failures): 平均故障间隔时间，越长越好
      MTTR(Mean Time To Recover): 平均恢复时间，越短越好
      
    高可用性 KO 强健壮性的原因就在于应对错误时，各个参与者的合作与责任/应对能力 -> MTTR/SLO
    高可用性的三个特性：
      1.优良的监控系统和自动化的自我恢复能力 =》 MTTR低
      2.分布式的冗余环境，使得DBMS错误影响降低
      3.强大的规则/功能文档，让所有工程师都可以参与自动化甚至手动的DBMS恢复进程，使之成为一种常态化工作

    在将高可用性作为SLO的指标之前，需要考虑当错误出现时：
      1.是否可以使用降级模式（只读）或者缓存，作为临时应对方案；
      2.是否可以将影响控制在某些特定环境或者客户群体；
      3.当宕机时间延长，用户会有哪些不好体验？

    然后评估SLO可用性指标SLI：
      1.定义MTTR；【平均每周可用性达99.%】 ->  做升级之类的导致发ilover事件
      2.定义最大的事故持续时长；【每次事故不超过10分钟】 ->  可以进行一些锁表操作
      3.以受影响的用户比例作为宕机指标；【如果5%的用户受影响，则认为是宕机事故】 ->  滚动式更新集群中的各个组件，使得受影响用户总是控制在一定比例之内
      4.每年4H宕机时间：A.至少提前2周公告用户；B.每次事件，严格控制受影响用户在10%以内
  
  3.吞吐量：与延迟相似的问题，禁用平均值

  4.数据持久化存储，成本与效率：
    针对不同的业务需求，选择相应的DB实现方式 ->  兼顾效率与成本


  5.定义SLO的原则：
    简洁
    以用户为中心
    循序渐进
  

四、监控：Real User Monitoring（RUM）
基于以上的SLI/SLO定义，实施近实时监控，那么如何使用这些监控信息：
  自动故障恢复
  紧急状态告警
  非紧急事件状态预警
  
对于不具有前瞻性数据探索的团队，只能参考历史数据，以增减相应的重视度，尽量避免不可测事件的发生！  
1.监控可用性Boolean
  以上面的SLO为准
  用户请求成败 APP log  ->  ELK ->  数据聚合，对比SLI A，记录是否符合SLO

2.监控延迟: SLO 99%请求延迟在25~100ms，可以视为可用性的其中一具体数据点
  1.中的数据可以直接用来检测各架构层的延迟数据，以1s为时间窗口，任一违反上述SLO，即视为宕机
  
3.监控吞吐量：tps/qps/IOps
  1.中采集的数据，可以轻易采集到实际的请求量，IOps，与负载测试的最高吞吐量区间值的差异，分析系统是否满负载

4.监控成本
  采集成本消费的分类数据，制作实时监控趋势图，掌握成本曲线才能更好的了解并进行成本节俭
